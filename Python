
import pyodbc
import pandas as pd
import numpy as np
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt

# Database connection parameters
server = 'xxxxxx'
database = 'xxxxxx'
username = 'rdavidson'
password = 'xxxxxx'

# SQL query
query = """
    SELECT servicetype, invoiceamount
    FROM xxxxxx.dbo.warehouse_shipment_history_vw
    WHERE parentid = 'xxxxxx'
    AND shipdate BETWEEN '2023-01-01' AND '2023-03-20'
"""

# Establish a connection to the SQL Server database
connection = pyodbc.connect(
    'DRIVER={SQL Server};SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password
)

# Execute the query and fetch the data into a pandas DataFrame
data = pd.read_sql_query(query, connection)

# Close the database connection
connection.close()

# Extract the 'servicetype' column for clustering
X = data[['invoiceamount']]

# Standardize the data (important for K-Means)
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Determine the optimal number of clusters using the Elbow method
inertia = []
for k in range(1, 11):
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(X_scaled)
    inertia.append(kmeans.inertia_)

# Plot the Elbow method graph to find the optimal number of clusters
plt.figure(figsize=(8, 6))
plt.plot(range(1, 11), inertia, marker='o', linestyle='--')
plt.xlabel('Number of Clusters')
plt.ylabel('Inertia')
plt.title('Elbow Method for Optimal Cluster Number')
plt.show()

# Based on the graph, choose the optimal number of clusters
optimal_clusters = 3  # You can adjust this based on the graph

# Perform K-Means clustering with the optimal number of clusters
kmeans = KMeans(n_clusters=optimal_clusters, random_state=42)
data['cluster'] = kmeans.fit_predict(X_scaled)

# Print the cluster assignments
print(data[['servicetype', 'cluster']])
